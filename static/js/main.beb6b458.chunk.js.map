{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","randomQuote","console","log","colorGenerator","setState","currentQuote","state","quotes","Math","floor","random","length","getQuotes","fetch","then","res","json","colors","split","newColor","color","document","getElementById","focus","this","className","style","backgroundColor","id","quoteText","quoteAuthor","onClick","onKeyPress","handleKeyPress","href","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,8HC2F5BC,G,8DAtFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,YAAc,WACZC,QAAQC,IAAI,kCACZ,EAAKC,iBACL,EAAKC,SAAS,CACZC,aAAc,EAAKC,MAAMC,OACvBC,KAAKC,MAAMD,KAAKE,SAAW,EAAKJ,MAAMC,OAAOI,YAbhC,EAiBnBC,UAAY,WAEVC,MAAM,eACHC,MAAK,SAACC,GACL,OAAOA,EAAIC,UAEZF,MAAK,SAACE,GACLf,QAAQC,IAAIc,GACZ,EAAKZ,SAAS,CAAEG,OAAQS,OAEzBF,KAAK,EAAKd,cA3BI,EAoCnBG,eAAiB,WACf,IAAIc,EACF,wIACFA,EAASA,EAAOC,MAAM,KACtBjB,QAAQC,IAAIe,GACZ,IAAIE,EAAWX,KAAKC,MAAMD,KAAKE,SAAWO,EAAON,QACjDV,QAAQC,IAAIiB,GAEZ,EAAKf,SAAS,CAAEgB,MAAOH,EAAOE,MA1C9B,EAAKb,MAAQ,CACXC,OAAQ,GACRF,aAAc,GACde,MAAO,QALQ,E,gEAgDjBC,SAASC,eAAe,aAAaC,QACrCC,KAAKZ,c,+BAGL,OACE,yBAAKa,UAAU,MAAMC,MAAO,CAAEC,gBAAiBH,KAAKlB,MAAMc,QACxD,yBAAKQ,GAAG,aACN,yBAAKA,GAAG,cACN,yBAAKA,GAAG,QAAQJ,KAAKlB,MAAMD,aAAawB,WACxC,yBAAKD,GAAG,UAAUJ,KAAKlB,MAAMD,aAAayB,cAE5C,yBAAKF,GAAG,gBACN,4BACEA,GAAG,YACHG,QAASP,KAAKxB,YACdgC,WAAYR,KAAKS,gBAHnB,aAOA,uBACEC,KACE,yCACAV,KAAKlB,MAAMD,aAAawB,UACxB,MACAL,KAAKlB,MAAMD,aAAayB,YAE1BF,GAAG,cACHO,IAAI,oBARN,2B,GApEMC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASC,eAAe,SDyHpB,kBAAmBwB,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.beb6b458.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./css/style.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: {},\n      currentQuote: {},\n      color: \"gray\",\n    };\n  }\n  randomQuote = () => {\n    console.log(\"we'regenetaring a random quote\");\n    this.colorGenerator();\n    this.setState({\n      currentQuote: this.state.quotes[\n        Math.floor(Math.random() * this.state.quotes.length)\n      ],\n    });\n  };\n  getQuotes = () => {\n    /* replace the link with https://raw.githubusercontent.com/JamesFT/Database-Quotes-JSON/master/quotes.json */\n    fetch(\"quotes.json\")\n      .then((res) => {\n        return res.json();\n      })\n      .then((json) => {\n        console.log(json);\n        this.setState({ quotes: json });\n      })\n      .then(this.randomQuote);\n  };\n  /*  \nNot needed in this case as .focus has done the trick\nhandleKeyPress = (e) => {\n    console.log(e, e.key);\n  };\n\n  */\n  colorGenerator = () => {\n    let colors =\n      \"#DBFE87, #DBFE87, #788475, #BBBDF6, #B2FF9E, #1DD3B0, #1DD3B0, #C59849, #9DC7C8, #BEEF9E, #EBF38B, #75ABBC, #A2AEBB, #E0B0D5, #E7E5E5\";\n    colors = colors.split(\",\");\n    console.log(colors);\n    let newColor = Math.floor(Math.random() * colors.length);\n    console.log(newColor);\n\n    this.setState({ color: colors[newColor] });\n  };\n  componentDidMount() {\n    // run after the UI is built, by default currentQuote is empty this will populate it\n    document.getElementById(\"new-quote\").focus();\n    this.getQuotes();\n  }\n  render() {\n    return (\n      <div className=\"App\" style={{ backgroundColor: this.state.color }}>\n        <div id=\"quote-box\">\n          <div id=\"text-group\">\n            <div id=\"text\">{this.state.currentQuote.quoteText}</div>\n            <div id=\"author\">{this.state.currentQuote.quoteAuthor}</div>\n          </div>\n          <div id=\"button-group\">\n            <button\n              id=\"new-quote\"\n              onClick={this.randomQuote}\n              onKeyPress={this.handleKeyPress}\n            >\n              New Quote\n            </button>\n            <a\n              href={\n                \"https://twitter.com/intent/tweet?text=\" +\n                this.state.currentQuote.quoteText +\n                \" - \" +\n                this.state.currentQuote.quoteAuthor\n              }\n              id=\"tweet-quote\"\n              alt=\"Tweet this Quote\"\n            >\n              Tweet this Quote\n            </a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}